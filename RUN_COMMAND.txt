# Single run command for local (Windows)
java -Xms256m -Xmx512m -XX:+UseSerialGC -XX:TieredStopAtLevel=1 -XX:CompileThreshold=100 -jar dictionary-attack-print.jar datasets\large\in.txt datasets\large\dictionary.txt datasets\large\out.txt

# 100x evaluation with 80% trimmed mean (Windows PowerShell)
Write-Host "Starting 100x evaluation...`n"; $times = @(); for ($i = 1; $i -le 100; $i++) { $output = java -Xms256m -Xmx512m -XX:+UseSerialGC -XX:TieredStopAtLevel=1 -XX:CompileThreshold=100 -jar "dictionary-attack-print.jar" "datasets\large\in.txt" "datasets\large\dictionary.txt" "datasets\large\out.txt" 2>&1 | Out-String; if ($output -match 'Total time spent \(milliseconds\): (\d+)') { $times += [int]$matches[1]; Write-Host "Run $i : $($matches[1]) ms" } }; Write-Host "`n=== Statistics (100 runs) ==="; $sorted = $times | Sort-Object; $discardCount = [math]::Floor($sorted.Count * 0.2); $keep = $sorted[$discardCount..($sorted.Count - 1)]; $average = ($keep | Measure-Object -Average).Average; $allAverage = ($times | Measure-Object -Average).Average; Write-Host "All runs average: $allAverage ms"; Write-Host "Min: $($sorted[0]) ms"; Write-Host "Max: $($sorted[-1]) ms"; Write-Host "Median: $($sorted[[math]::Floor($sorted.Count / 2)]) ms"; Write-Host "80% trimmed mean (top 20% discarded): $average ms"
